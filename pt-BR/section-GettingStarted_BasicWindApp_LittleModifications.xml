<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>

<section version="4.5" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/4.5/docbookx.dtd">
	<title>Fazendo pequenas mudanças</title>


	<section>
		<title>Adicionando um Atributo</title>

		<para>
			Vamos alterar o nosso Objeto de Domínio
			<guilabel>Basic</guilabel> incluindo dois novos atributos: <guilabel>Altura</guilabel> e <guilabel>Sexo</guilabel>.
		</para>

		<para>
			O atributo <guilabel>Altura</guilabel> deve ser do tipo <classname>Double</classname>, posicionado abaixo do atributo <guilabel>Data de Nascimento</guilabel>
			e deve ter um valor padrão de 1.75.
		</para>
		<para>
			O atributo <guilabel>Sexo</guilabel> deve ser <classname>String</classname>, posicionado abaixo do atributo <guilabel>Altura</guilabel>, representado como ComboBox 
			tendo como possíveis valores Masculino e Feminino.
		</para>
		
		<para>
			Sendo assim, nosso objeto pode ser representado da seguinte forma:
			
			<figure id="figure-BasicWindApp_UML_Representation">
				<title>
					Representação UML do Objeto de Domínio <guilabel>Basic</guilabel>
				</title>
				<mediaobject>
					<imageobject>
						<imagedata  fileref="images/basic_uml_class.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
		</para>
		
		<para>
			Utilizando a linguagem <xref linkend="term-Terra"/> podemos representar o atributo <guilabel>Altura</guilabel> da seguinte forma:
		</para>

			<example id="example-BasicWindApp_Height_Attribute">
				<title>Representação do atributo Altura</title>
				<programlisting language="XML" startinglinenumber="1">
Double altura "Altura"{
	x:1 													// Coluna 1
	y:3								 						// Linha 3
	width: 40												// Largura
	value: ${this.altura == null ? 1.75 : this.altura} 		// Valor padrao (utilizando Expression Language)
}
				</programlisting>
			</example>
		
		<para>Na primeira linha definimos um atributo do tipo <classname>Double</classname>, e em seguida declaramos um código de referência. 
		Esse código será utilizado para referenciar o atributo em Regras de Negócio. Por fim, declaramos o rótulo a ser utilizado na área de edição e grid de seleção.</para>
		<para>Nas linhas 2-5 definimos 4 das muitas propriedades disponíveis para Atributos. Utilizamos as propriedades de posicionamento x e y para configurar o atributo de forma tabular na tela.
		Além disso utilizamos width para especificar um tamanho para o campo de texto utilizado na representação gráfica do atributo. E por fim, utilizamos a propriedade value para determinar um valor default.  </para>
		
		
		<para>De maneira similiar declaramos o atributo  <guilabel>Sexo</guilabel>:</para>
		
			<example id="example-BasicWindApp_Gender_Attribute">
				<title>Representação do atributo Sexo</title>
				<programlisting language="XML" startinglinenumber="1">
String sexo "Sexo"{
	x:1
	y:4
	width: 100
	presentation_type: combo
	validValues: ["Masculino", "Feminino"]
	
}
				</programlisting>
			</example>		

		<para>No entanto, neste caso utilizamos a propriedade "presentantion_type" com a finalidade de representar o atributo como um ComboBox. 
		Já na propriedade "validValues" definimos uma lista fixa de valores disponíveis para escolha do usuário.
		Em casos mais complexos, é possível definir uma Regra de Negócio responsável por carregar as opções do ComboBox.</para>
		
		
		<para>Com as alterações feitas, execute seu aplicativo Wind.</para>
	</section>


	<section>
		<title>Criando uma Regra de Negócio</title>
		<para>Regras de Negócio serão discutidas a fundo no capitulo <xref linkend="at-BusinessRules" />. 
			No entanto, nesta seção será apresentado o conceito básico e um exemplo prático bem simples. </para>
		<para>
			Um Modelo de Domínio representa uma abstração de um negócio existente no mundo real. Ou seja, é a simplificação de um cenário que se deseja traduzir em software. 
			Assim como no mundo real, os dados contidos neste modelo são dinâmicos. A todo momento eles são alterados de forma a produzir um resultado que faça sentido neste domínio.
			Por exemplo, ao reservar uma passagem na primeira classe de um vôo partindo de São Paulo com destino a Londres, estamos manipulando os dados representados pelas entidades deste domínio com a 
			finalidade de representar a ação que está ocorrendo no mundo real. É responsabilidade das Regras de Negócio descreverem essas ações. 
		</para>
		<!-- para>
			 Na Plataforma Wind as Regras de Negócio aplicam o principio da Responsabilidade Única. Ou seja, uma Regra de Negócio deve realizar uma tarefa clara e objetiva. 
			 Dessa forma, aumenta-se a testabilidade do código, facilidando a manutenção e evolução.    
		</para -->	
		<para>
			Neste exemplo, criaremos uma regra responsável por calcular a diferença entre o atributo Data Nascimento do nosso Dominio Basic e a data corrente.
		</para>
		
		<procedure id="procedure-LittleModifications_NewRule">
			<title>
				Criando uma Regra de Negócio
			</title>
			<step>
				Abra a declaração do Dominio Basic feita no arquivo basic.dmo
			</step>
			<step>
				<para>Criamos uma regra em nosso Dominio da seguinte forma:</para>
				<programlisting language="XML" startinglinenumber="1">
operation groovy CalculateDateDiff "Calcular Datas"{
	file: br/com/maisha/wind/sample/rule/CalculateDateDiff.groovy
}
				</programlisting>
			</step>
			<step>
				<para>Em seguida criamos a classe groovy <guilabel>br.com.maisha.wind.sample.rule.CalculateDateDiff</guilabel></para>
				<programlisting language="XML" startinglinenumber="1">
class CalculateDateDiff{

	def ctx
	def model
	def meta
	
	def execute(){
		def diff =  new Date() - model.birthDate 
		"${diff} dias se passaram desde ${model.birthDate.pt_BR}".info()
	}
	
}
				</programlisting>
			</step>
			<step>Execute o aplicativo e veja o resultado.</step>
		</procedure>
		
	</section>

</section>